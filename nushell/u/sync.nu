const MERGE_EXTS = [c conf cpp css go html js json json5 jsonc kdl lua md nu py rs scss sql surql svelte toml ts tsx txt zig]
const BACKUP_EXTS = [md surql kdbx]

const MERGE_STR = ("*.{" ++ ($MERGE_EXTS | str join ",") ++ "}" | str join)
const BACKUP_STR = ("*.{" ++ ($BACKUP_EXTS | str join ",") ++ "}" | str join)

const u0prf = $"# Generated by Nushell UA
backup = Name {($BACKUP_STR)}
backupcurr = Name {($BACKUP_STR)}
backuploc = central
backupdir = /w/...trash
backupprefix = ...trash-
backupsuffix = .$VERSION
maxbackups = 9

sshargs = -C

auto = true
batch = true

fastcheck = true
fastercheckUNSAFE = false

ignore = Name ..*
ignore = Name .git/*
ignorenot = Name .git/config
ignore = Name .swc/*
ignore = Name *.tsbuildinfo
ignore = Name .DS_Store
ignore = Name Thumbs.db
ignore = Name __pycache__
ignore = Name .vitepress/cache
ignore = Name src-tauri/target
ignore = Name src-tauri/gen
ignore = Name node_modules
ignore = Name bun.lock*
ignore = Name vite.config.[jt]s.timestamp-*
ignore = Path d/*/{archive,*.log,LOG*,LOCK}
ignore = Path g/*/{*,.*}
ignorenot = Path g/*/.git
ignorenot = Path g/*/.git/config

times = true
diff = delta OLDER NEWER
merge = Name {($MERGE_STR)} -> diff3 -m CURRENT1 CURRENTARCH CURRENT2 > NEW

owner = true
group = true
"

use ($nu.default-config-dir + "/u/confirm-if.nu")
alias cif = confirm-if

export def main [
    args: list<string> = []
    --confirm (-c)
    --generate (-g)
    --prefix (-p) = "/"
    --dir (-d) = "ua"
] {
	let REMOTE_LIST = (open ($nu.default-config-dir)/.u.nuon | get REMOTE_LIST)
	# assert device-specific config

    if $generate {
        $u0prf | sudo tee /root/.unison/ua.prf out> /dev/null
        return
    }

    let remote = ($REMOTE_LIST | input list -f "Choose your VPS")
    if ($remote | is-empty) {
        break
    }

    let $local_path = ([$prefix $dir] | path join)
    let $remote_path = ([$"ssh://root@($remote.ip):($remote.port)//" $dir] | path join)

    let hosts = [$local_path $remote_path]

    cif $confirm [$hosts]

    let cmds = ["unison" "ua" ...$hosts $"-clientHostName=($env.HOSTNAME)" "-batch=false" "-auto=false" ...$args]
    print [sudo ...$cmds]
    ^sudo ...$cmds
}
